[{"path":"https://asenetcky-r-pkgs.github.io/squeal/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 squeal authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Senetcky. Author, maintainer, copyright holder.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Senetcky (2025). squeal: Template Internal Packages Working SQL Servers. R package version 0.3.0, https://asenetcky-r-pkgs.github.io/squeal/.","code":"@Manual{,   title = {squeal: Template for Internal Packages Working with SQL Servers},   author = {Alexander Senetcky},   year = {2025},   note = {R package version 0.3.0},   url = {https://asenetcky-r-pkgs.github.io/squeal/}, }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/index.html","id":"squeal","dir":"","previous_headings":"","what":"Template for Internal Packages Working with SQL Servers","title":"Template for Internal Packages Working with SQL Servers","text":"squeal makes working DPH SQL servers breeze. basic functions common tasks domain-specific wrappers make working DPH_ODP, various facts dimensions easier, faster program safer execute.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Template for Internal Packages Working with SQL Servers","text":"can install development version sql like :","code":"# remotes::install( # https://github.com/asenetcky-r-pkgs/squeal.git # git = \"external\") library(squeal)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/index.html","id":"basics","dir":"","previous_headings":"","what":"Basics","title":"Template for Internal Packages Working with SQL Servers","text":"squeal basics checks built ensure developers can safe reasonably expected.","code":"conn <- dbplyr::simulate_mssql() database <- \"fake_database\" schema <- \"fake_schema\" table <- \"fake_table\"  important_data <-   dplyr::tibble(     col1 = 1:10,     col2 = 1:10,     col3 = 1:10   )  # Survey a table # Grab basic information about the table from the comfort of your IDE survey_table(   conn,   database,   schema,   table )  # Create a table create_table(   important_data,   conn,   database,   schema,   table )   # Read a table read_table(   conn,   database,   schema,   table,   lazy = FALSE # set TRUE for lazily-evaluated tables! )  # Append to a table append_table(   important_data,   conn,   database,   schema,   table )  # Truncate a table truncate_table(   conn,   database,   schema,   table )  # Drop a table nuke_table(   conn,   database,   schema,   table )"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/append_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a SQL table — append_table","title":"Append a SQL table — append_table","text":"append_table appends dataframe SQL table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/append_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append a SQL table — append_table","text":"","code":"append_table(.data, conn, database, schema, table)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/append_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a SQL table — append_table","text":".data Dataframe append SQL table. conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/append_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a SQL table — append_table","text":"scalar numeric.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/append_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append a SQL table — append_table","text":"","code":"if (FALSE) { # \\dontrun{ append_table(   .data = my_dataframe,   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\" ) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/assign_list_globally.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to assign list elements into global environment — assign_list_globally","title":"Helper function to assign list elements into global environment — assign_list_globally","text":"function wrapper around list2env assigns every object list global environment individual objects. function useful loading dimension tables global environment individual dataframes breaking prelude pulling global environment inspection.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/assign_list_globally.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to assign list elements into global environment — assign_list_globally","text":"","code":"assign_list_globally(x)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/assign_list_globally.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to assign list elements into global environment — assign_list_globally","text":"x list object.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/assign_list_globally.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to assign list elements into global environment — assign_list_globally","text":"global environment invisibly.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/assign_list_globally.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to assign list elements into global environment — assign_list_globally","text":"","code":"if (FALSE) { # \\dontrun{ mylist <- dplyr::lst(   table1 = mtcars,   table2 = mtcars,   table3 = mtcars )  assign_list_globally(mylist) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/create_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new SQL table — create_table","title":"Create a new SQL table — create_table","text":"create_table creates new SQL table dataframe. append table already exists, overwrite existing table.  Users use append_table, truncate_table overwrite_table explicitly perform actions.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/create_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new SQL table — create_table","text":"","code":"create_table(.data, conn, database, schema, table)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/create_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new SQL table — create_table","text":".data Dataframe append SQL table. conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/create_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new SQL table — create_table","text":"TRUE invisibly.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/create_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a new SQL table — create_table","text":"","code":"if (FALSE) { # \\dontrun{ create_table(   .data = my_dataframe,   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\" ) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/nuke_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop a SQL Table — nuke_table","title":"Drop a SQL Table — nuke_table","text":"Drop SQL Table","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/nuke_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop a SQL Table — nuke_table","text":"","code":"nuke_table(conn, database, schema, table)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/nuke_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop a SQL Table — nuke_table","text":"conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/nuke_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop a SQL Table — nuke_table","text":"TRUE invisibly.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/nuke_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop a SQL Table — nuke_table","text":"","code":"if (FALSE) { # \\dontrun{ nuke_table(   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\" ) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/overwrite_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate and Append a SQL table - Preserving Structure — overwrite_table","title":"Truncate and Append a SQL table - Preserving Structure — overwrite_table","text":"Truncate append data SQL table without losing SQL identities without changing table structure.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/overwrite_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate and Append a SQL table - Preserving Structure — overwrite_table","text":"","code":"overwrite_table(.data, conn, database, schema, table)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/overwrite_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate and Append a SQL table - Preserving Structure — overwrite_table","text":".data Dataframe append SQL table. conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/overwrite_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate and Append a SQL table - Preserving Structure — overwrite_table","text":"scalar numeric.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/overwrite_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate and Append a SQL table - Preserving Structure — overwrite_table","text":"","code":"if (FALSE) { # \\dontrun{ overwrite_table(   .data = my_dataframe,   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\" ) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/read_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all data from a SQL Table — read_table","title":"Read all data from a SQL Table — read_table","text":"Read rows data SQL table either dataframe stored memory lazy tibble.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/read_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all data from a SQL Table — read_table","text":"","code":"read_table(conn, database, schema, table, lazy = FALSE)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/read_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all data from a SQL Table — read_table","text":"conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table. lazy Bool default value FALSE indicating tibble memory returned user. TRUE specifies lazy tibble returned.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/read_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read all data from a SQL Table — read_table","text":"Tibble lazy tibble.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/read_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read all data from a SQL Table — read_table","text":"","code":"if (FALSE) { # \\dontrun{ read_table(   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\",   lazy = FALSE ) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/survey_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey information about a SQL table — survey_table","title":"Survey information about a SQL table — survey_table","text":"survey_table returns tibble information target SQL table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/survey_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey information about a SQL table — survey_table","text":"","code":"survey_table(conn, database, schema, table)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/survey_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey information about a SQL table — survey_table","text":"conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/survey_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survey information about a SQL table — survey_table","text":"Tibble information target table.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/survey_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survey information about a SQL table — survey_table","text":"","code":"if (FALSE) { # \\dontrun{ survey_table(   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\" ) } # }"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/truncate_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate a SQL table — truncate_table","title":"Truncate a SQL table — truncate_table","text":"truncate_table removes rows SQL table leaves table structure identity intact.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/truncate_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate a SQL table — truncate_table","text":"","code":"truncate_table(conn, database, schema, table)"},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/truncate_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate a SQL table — truncate_table","text":"conn DBIConnection object, returned DBI::dbConnect(). database Name database catalog. schema Name schema. table Name table.","code":""},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/truncate_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Truncate a SQL table — truncate_table","text":"scalar numeric specifies number rows affected truncate command.","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/reference/truncate_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Truncate a SQL table — truncate_table","text":"","code":"if (FALSE) { # \\dontrun{ truncate_table(   conn = my_connection,   database = \"my_database\",   schema = \"my_schema\",   table = \"my_table\" ) } # }"},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/news/index.html","id":"features-0-3-0","dir":"Changelog","previous_headings":"","what":"Features","title":"squeal 0.3.0","text":"implemented GHA","code":""},{"path":[]},{"path":"https://asenetcky-r-pkgs.github.io/squeal/news/index.html","id":"features-0-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"squeal 0.2.0","text":"added basic SQL functionality","code":""}]
